/* tslint:disable */
/* eslint-disable */
/**
 * LUPO Cloud
 * LUPO Cloud Data
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The measurand name of the collected data
 * @export
 * @enum {string}
 */

export const ILupoAirComp = {
    LuQx: 'LuQX',
    No2: 'NO2',
    O3: 'O3',
    Pm10: 'PM10',
    Pm25: 'PM25'
} as const;

export type ILupoAirComp = typeof ILupoAirComp[keyof typeof ILupoAirComp];


/**
 * An object specifying the origin of the data
 * @export
 * @interface ILupoAirMeasuringLabels
 */
export interface ILupoAirMeasuringLabels {
    /**
     * The id of a station
     * @type {string}
     * @memberof ILupoAirMeasuringLabels
     */
    'station'?: string;
    /**
     * 
     * @type {ILupoAirComp}
     * @memberof ILupoAirMeasuringLabels
     */
    'comp'?: ILupoAirComp;
}
/**
 * The measurand key of the collected data
 * @export
 * @enum {string}
 */

export const ILupoAirMetric = {
    Luqx: 'kit.iai.test.luqx',
    No2: 'kit.iai.test.no2',
    O3: 'kit.iai.test.o3',
    Pm10: 'kit.iai.test.pm10',
    Pm25k: 'kit.iai.test.pm25k'
} as const;

export type ILupoAirMetric = typeof ILupoAirMetric[keyof typeof ILupoAirMetric];


/**
 * A data object containing the measurements of the station
 * @export
 * @interface ILupoMeasuringData
 */
export interface ILupoMeasuringData {
    /**
     * 
     * @type {ILupoAirMetric}
     * @memberof ILupoMeasuringData
     */
    'metric'?: ILupoAirMetric;
    /**
     * 
     * @type {ILupoAirMeasuringLabels}
     * @memberof ILupoMeasuringData
     */
    'labels'?: ILupoAirMeasuringLabels;
    /**
     * Meta data
     * @type {object}
     * @memberof ILupoMeasuringData
     */
    'metaData'?: object;
    /**
     * UNIX timestamps with a corresponding value at the same index
     * @type {Array<number>}
     * @memberof ILupoMeasuringData
     */
    'times'?: Array<number>;
    /**
     * Measured values with a corresponding time at the same index
     * @type {Array<number>}
     * @memberof ILupoMeasuringData
     */
    'values'?: Array<number>;
}
/**
 * The URLSearchParams interface for LUPO cloud URLs
 * @export
 * @interface ILupoMeasuringURLSearchParams
 */
export interface ILupoMeasuringURLSearchParams {
    /**
     * Filter for time start dates
     * @type {string}
     * @memberof ILupoMeasuringURLSearchParams
     */
    'from'?: string | null;
    /**
     * Filter for time end dates
     * @type {string}
     * @memberof ILupoMeasuringURLSearchParams
     */
    'to'?: string | null;
    /**
     * Filter for label contents
     * @type {string}
     * @memberof ILupoMeasuringURLSearchParams
     */
    'labels'?: string | null;
}

/**
 * LUPOAirMetricControllerApi - axios parameter creator
 * @export
 */
export const LUPOAirMetricControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns air quality index data
         * @summary LUQX Data
         * @param {ILupoAirMetric} metric The measurand of interest
         * @param {ILupoMeasuringURLSearchParams} [searchParams] Filter for time start dates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMetric: async (metric: ILupoAirMetric, searchParams?: ILupoMeasuringURLSearchParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('readMetric', 'metric', metric)
            const localVarPath = `/air/metric/{metric}`
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchParams !== undefined) {
                localVarQueryParameter['searchParams'] = searchParams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LUPOAirMetricControllerApi - functional programming interface
 * @export
 */
export const LUPOAirMetricControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LUPOAirMetricControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns air quality index data
         * @summary LUQX Data
         * @param {ILupoAirMetric} metric The measurand of interest
         * @param {ILupoMeasuringURLSearchParams} [searchParams] Filter for time start dates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMetric(metric: ILupoAirMetric, searchParams?: ILupoMeasuringURLSearchParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ILupoMeasuringData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMetric(metric, searchParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LUPOAirMetricControllerApi - factory interface
 * @export
 */
export const LUPOAirMetricControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LUPOAirMetricControllerApiFp(configuration)
    return {
        /**
         * Returns air quality index data
         * @summary LUQX Data
         * @param {ILupoAirMetric} metric The measurand of interest
         * @param {ILupoMeasuringURLSearchParams} [searchParams] Filter for time start dates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMetric(metric: ILupoAirMetric, searchParams?: ILupoMeasuringURLSearchParams, options?: any): AxiosPromise<Array<ILupoMeasuringData>> {
            return localVarFp.readMetric(metric, searchParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LUPOAirMetricControllerApi - object-oriented interface
 * @export
 * @class LUPOAirMetricControllerApi
 * @extends {BaseAPI}
 */
export class LUPOAirMetricControllerApi extends BaseAPI {
    /**
     * Returns air quality index data
     * @summary LUQX Data
     * @param {ILupoAirMetric} metric The measurand of interest
     * @param {ILupoMeasuringURLSearchParams} [searchParams] Filter for time start dates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LUPOAirMetricControllerApi
     */
    public readMetric(metric: ILupoAirMetric, searchParams?: ILupoMeasuringURLSearchParams, options?: AxiosRequestConfig) {
        return LUPOAirMetricControllerApiFp(this.configuration).readMetric(metric, searchParams, options).then((request) => request(this.axios, this.basePath));
    }
}


