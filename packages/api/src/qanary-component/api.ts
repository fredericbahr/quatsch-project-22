/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The meta data that will be provided to the Spring Boot Admin
 * @export
 * @interface IQanaryComponentAbout
 */
export interface IQanaryComponentAbout {
    /**
     * The name of the qanary component
     * @type {string}
     * @memberof IQanaryComponentAbout
     */
    'name'?: string;
    /**
     * The description of the qanary component
     * @type {string}
     * @memberof IQanaryComponentAbout
     */
    'description'?: string;
    /**
     * The version of the qanary component
     * @type {string}
     * @memberof IQanaryComponentAbout
     */
    'version'?: string;
}
/**
 * Bad Request when request body is invalid
 * @export
 * @interface IQanaryComponentError
 */
export interface IQanaryComponentError {
    /**
     * A timestamp when the error has occurred
     * @type {string}
     * @memberof IQanaryComponentError
     */
    'timestamp'?: string;
    /**
     * The status code of the error
     * @type {number}
     * @memberof IQanaryComponentError
     */
    'status'?: number;
    /**
     * The error message
     * @type {string}
     * @memberof IQanaryComponentError
     */
    'error'?: string;
    /**
     * The endpoint where error has occurred
     * @type {string}
     * @memberof IQanaryComponentError
     */
    'path'?: string;
}
/**
 * An object describing the overall status of the service
 * @export
 * @interface IQanaryComponentHealth
 */
export interface IQanaryComponentHealth {
    /**
     * The overall status of the service
     * @type {string}
     * @memberof IQanaryComponentHealth
     */
    'status'?: IQanaryComponentHealthStatusEnum;
}

export const IQanaryComponentHealthStatusEnum = {
    Up: 'UP',
    Down: 'DOWN'
} as const;

export type IQanaryComponentHealthStatusEnum = typeof IQanaryComponentHealthStatusEnum[keyof typeof IQanaryComponentHealthStatusEnum];

/**
 * The qanary message that is received/send by the component
 * @export
 * @interface IQanaryMessage
 */
export interface IQanaryMessage {
    /**
     * Additional values
     * @type {{ [key: string]: string; }}
     * @memberof IQanaryMessage
     */
    'values'?: { [key: string]: string; };
    /**
     * The graph uri of the knowledge graph that contains information for the incoming request
     * @type {string}
     * @memberof IQanaryMessage
     */
    'inGraph'?: string;
    /**
     * The sparql endpoint as url
     * @type {string}
     * @memberof IQanaryMessage
     */
    'endpoint'?: string;
    /**
     * The graph uri of the knowledge graph that contains information for the outgoing response
     * @type {string}
     * @memberof IQanaryMessage
     */
    'outGraph'?: string;
}

/**
 * QanaryServiceControllerApi - axios parameter creator
 * @export
 */
export const QanaryServiceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For annotating a question from a given knowledge graph
         * @summary Each Qanary process will implement this endpoint as it is required
         * @param {IQanaryMessage} iQanaryMessage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotation: async (iQanaryMessage: IQanaryMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iQanaryMessage' is not null or undefined
            assertParamExists('createAnnotation', 'iQanaryMessage', iQanaryMessage)
            const localVarPath = `/annotatequestion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iQanaryMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides additional information about the component
         * @summary Provides additional information about the component
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAbout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides additional information about the component
         * @summary Provides additional information about the component
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readHealth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QanaryServiceControllerApi - functional programming interface
 * @export
 */
export const QanaryServiceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QanaryServiceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * For annotating a question from a given knowledge graph
         * @summary Each Qanary process will implement this endpoint as it is required
         * @param {IQanaryMessage} iQanaryMessage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnotation(iQanaryMessage: IQanaryMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IQanaryMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnotation(iQanaryMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides additional information about the component
         * @summary Provides additional information about the component
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAbout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IQanaryComponentAbout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAbout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides additional information about the component
         * @summary Provides additional information about the component
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readHealth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IQanaryComponentHealth>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readHealth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QanaryServiceControllerApi - factory interface
 * @export
 */
export const QanaryServiceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QanaryServiceControllerApiFp(configuration)
    return {
        /**
         * For annotating a question from a given knowledge graph
         * @summary Each Qanary process will implement this endpoint as it is required
         * @param {IQanaryMessage} iQanaryMessage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnotation(iQanaryMessage: IQanaryMessage, options?: any): AxiosPromise<IQanaryMessage> {
            return localVarFp.createAnnotation(iQanaryMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides additional information about the component
         * @summary Provides additional information about the component
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAbout(options?: any): AxiosPromise<IQanaryComponentAbout> {
            return localVarFp.readAbout(options).then((request) => request(axios, basePath));
        },
        /**
         * Provides additional information about the component
         * @summary Provides additional information about the component
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readHealth(options?: any): AxiosPromise<IQanaryComponentHealth> {
            return localVarFp.readHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QanaryServiceControllerApi - object-oriented interface
 * @export
 * @class QanaryServiceControllerApi
 * @extends {BaseAPI}
 */
export class QanaryServiceControllerApi extends BaseAPI {
    /**
     * For annotating a question from a given knowledge graph
     * @summary Each Qanary process will implement this endpoint as it is required
     * @param {IQanaryMessage} iQanaryMessage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QanaryServiceControllerApi
     */
    public createAnnotation(iQanaryMessage: IQanaryMessage, options?: AxiosRequestConfig) {
        return QanaryServiceControllerApiFp(this.configuration).createAnnotation(iQanaryMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides additional information about the component
     * @summary Provides additional information about the component
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QanaryServiceControllerApi
     */
    public readAbout(options?: AxiosRequestConfig) {
        return QanaryServiceControllerApiFp(this.configuration).readAbout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides additional information about the component
     * @summary Provides additional information about the component
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QanaryServiceControllerApi
     */
    public readHealth(options?: AxiosRequestConfig) {
        return QanaryServiceControllerApiFp(this.configuration).readHealth(options).then((request) => request(this.axios, this.basePath));
    }
}


