/* tslint:disable */
/* eslint-disable */
/**
 * LUBW Qanary Pipeline
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The qanary message that is received/send by the component
 * @export
 * @interface IQanaryMessage
 */
export interface IQanaryMessage {
    /**
     * Additional values
     * @type {{ [key: string]: string; }}
     * @memberof IQanaryMessage
     */
    'values'?: { [key: string]: string; };
    /**
     * The graph uri of the knowledge graph that contains information for the incoming request
     * @type {string}
     * @memberof IQanaryMessage
     */
    'inGraph'?: string;
    /**
     * The sparql endpoint as url
     * @type {string}
     * @memberof IQanaryMessage
     */
    'endpoint'?: string;
    /**
     * The graph uri of the knowledge graph that contains information for the outgoing response
     * @type {string}
     * @memberof IQanaryMessage
     */
    'outGraph'?: string;
    /**
     * The url of the stored question
     * @type {string}
     * @memberof IQanaryMessage
     */
    'question'?: string;
}
/**
 * 
 * @export
 * @interface IRequestQuestionAnsweringProcess
 */
export interface IRequestQuestionAnsweringProcess {
    /**
     * A question to be answered
     * @type {string}
     * @memberof IRequestQuestionAnsweringProcess
     */
    'question'?: string;
    /**
     * A list of components to be applied to the question
     * @type {Array<string>}
     * @memberof IRequestQuestionAnsweringProcess
     */
    'componentlist'?: Array<string>;
}

/**
 * QanaryQuestionAnsweringControllerApi - axios parameter creator
 * @export
 */
export const QanaryQuestionAnsweringControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start a process directly with a textual question
         * @summary Start a process directly with a textual question
         * @param {IRequestQuestionAnsweringProcess} iRequestQuestionAnsweringProcess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStartQuestionAnsweringWithTextQuestion: async (iRequestQuestionAnsweringProcess: IRequestQuestionAnsweringProcess, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iRequestQuestionAnsweringProcess' is not null or undefined
            assertParamExists('createStartQuestionAnsweringWithTextQuestion', 'iRequestQuestionAnsweringProcess', iRequestQuestionAnsweringProcess)
            const localVarPath = `/startquestionansweringwithtextquestion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iRequestQuestionAnsweringProcess, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QanaryQuestionAnsweringControllerApi - functional programming interface
 * @export
 */
export const QanaryQuestionAnsweringControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QanaryQuestionAnsweringControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Start a process directly with a textual question
         * @summary Start a process directly with a textual question
         * @param {IRequestQuestionAnsweringProcess} iRequestQuestionAnsweringProcess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStartQuestionAnsweringWithTextQuestion(iRequestQuestionAnsweringProcess: IRequestQuestionAnsweringProcess, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IQanaryMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStartQuestionAnsweringWithTextQuestion(iRequestQuestionAnsweringProcess, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QanaryQuestionAnsweringControllerApi - factory interface
 * @export
 */
export const QanaryQuestionAnsweringControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QanaryQuestionAnsweringControllerApiFp(configuration)
    return {
        /**
         * Start a process directly with a textual question
         * @summary Start a process directly with a textual question
         * @param {IRequestQuestionAnsweringProcess} iRequestQuestionAnsweringProcess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStartQuestionAnsweringWithTextQuestion(iRequestQuestionAnsweringProcess: IRequestQuestionAnsweringProcess, options?: any): AxiosPromise<IQanaryMessage> {
            return localVarFp.createStartQuestionAnsweringWithTextQuestion(iRequestQuestionAnsweringProcess, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QanaryQuestionAnsweringControllerApi - object-oriented interface
 * @export
 * @class QanaryQuestionAnsweringControllerApi
 * @extends {BaseAPI}
 */
export class QanaryQuestionAnsweringControllerApi extends BaseAPI {
    /**
     * Start a process directly with a textual question
     * @summary Start a process directly with a textual question
     * @param {IRequestQuestionAnsweringProcess} iRequestQuestionAnsweringProcess 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QanaryQuestionAnsweringControllerApi
     */
    public createStartQuestionAnsweringWithTextQuestion(iRequestQuestionAnsweringProcess: IRequestQuestionAnsweringProcess, options?: AxiosRequestConfig) {
        return QanaryQuestionAnsweringControllerApiFp(this.configuration).createStartQuestionAnsweringWithTextQuestion(iRequestQuestionAnsweringProcess, options).then((request) => request(this.axios, this.basePath));
    }
}


