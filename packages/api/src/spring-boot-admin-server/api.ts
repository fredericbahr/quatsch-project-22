/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Provides meta data of the component
 * @export
 * @interface IQanaryComponentCoreMetadata
 */
export interface IQanaryComponentCoreMetadata {
    /**
     * The start tme of the component as a formatted date string
     * @type {string}
     * @memberof IQanaryComponentCoreMetadata
     */
    'start'?: string;
    /**
     * A description of the component
     * @type {string}
     * @memberof IQanaryComponentCoreMetadata
     */
    'description'?: string;
    /**
     * The url of the about endpoint
     * @type {string}
     * @memberof IQanaryComponentCoreMetadata
     */
    'about'?: string;
    /**
     * The programming language in which the component is written
     * @type {string}
     * @memberof IQanaryComponentCoreMetadata
     */
    'written in'?: string;
}
/**
 * The request body that needs to be send to the Spring Boot Admin Server for registering a new component
 * @export
 * @interface ISpringBootAdminServerInstances
 */
export interface ISpringBootAdminServerInstances {
    /**
     * The name of the component
     * @type {string}
     * @memberof ISpringBootAdminServerInstances
     */
    'name'?: string;
    /**
     * The url of the component. The Spring Boot Admin Server can communicate with the component via this url
     * @type {string}
     * @memberof ISpringBootAdminServerInstances
     */
    'serviceUrl'?: string;
    /**
     * The url of the health endpoint of the component. The Spring Boot Admin Server can check the health of the component via this endpoint 
     * @type {string}
     * @memberof ISpringBootAdminServerInstances
     */
    'healthUrl'?: string;
    /**
     * 
     * @type {IQanaryComponentCoreMetadata}
     * @memberof ISpringBootAdminServerInstances
     */
    'metadata'?: IQanaryComponentCoreMetadata;
}
/**
 * The erroneous response for registering a new component at the Spring Boot Admin Server
 * @export
 * @interface ISpringBootAdminServerInstancesFailure
 */
export interface ISpringBootAdminServerInstancesFailure {
    /**
     * 
     * @type {boolean}
     * @memberof ISpringBootAdminServerInstancesFailure
     */
    'locked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ISpringBootAdminServerInstancesFailure
     */
    'state'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ISpringBootAdminServerInstancesFailure
     */
    'supportsBYOB'?: boolean;
}
/**
 * The successful response after registration a new component at the Spring Boot Admin Server
 * @export
 * @interface ISpringBootAdminServerInstancesSuccess
 */
export interface ISpringBootAdminServerInstancesSuccess {
    /**
     * 
     * @type {boolean}
     * @memberof ISpringBootAdminServerInstancesSuccess
     */
    'locked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ISpringBootAdminServerInstancesSuccess
     */
    'state'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ISpringBootAdminServerInstancesSuccess
     */
    'supportsBYOB'?: boolean;
}

/**
 * SpringBootAdminServerApi - axios parameter creator
 * @export
 */
export const SpringBootAdminServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides an endpoint to register new components at the Spring Boot Admin Server
         * @summary Provides an endpoint to register new components at the Spring Boot Admin Server
         * @param {ISpringBootAdminServerInstances} iSpringBootAdminServerInstances 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstances: async (iSpringBootAdminServerInstances: ISpringBootAdminServerInstances, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iSpringBootAdminServerInstances' is not null or undefined
            assertParamExists('createInstances', 'iSpringBootAdminServerInstances', iSpringBootAdminServerInstances)
            const localVarPath = `/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iSpringBootAdminServerInstances, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpringBootAdminServerApi - functional programming interface
 * @export
 */
export const SpringBootAdminServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpringBootAdminServerApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides an endpoint to register new components at the Spring Boot Admin Server
         * @summary Provides an endpoint to register new components at the Spring Boot Admin Server
         * @param {ISpringBootAdminServerInstances} iSpringBootAdminServerInstances 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstances(iSpringBootAdminServerInstances: ISpringBootAdminServerInstances, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISpringBootAdminServerInstancesSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstances(iSpringBootAdminServerInstances, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpringBootAdminServerApi - factory interface
 * @export
 */
export const SpringBootAdminServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpringBootAdminServerApiFp(configuration)
    return {
        /**
         * Provides an endpoint to register new components at the Spring Boot Admin Server
         * @summary Provides an endpoint to register new components at the Spring Boot Admin Server
         * @param {ISpringBootAdminServerInstances} iSpringBootAdminServerInstances 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstances(iSpringBootAdminServerInstances: ISpringBootAdminServerInstances, options?: any): AxiosPromise<ISpringBootAdminServerInstancesSuccess> {
            return localVarFp.createInstances(iSpringBootAdminServerInstances, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpringBootAdminServerApi - object-oriented interface
 * @export
 * @class SpringBootAdminServerApi
 * @extends {BaseAPI}
 */
export class SpringBootAdminServerApi extends BaseAPI {
    /**
     * Provides an endpoint to register new components at the Spring Boot Admin Server
     * @summary Provides an endpoint to register new components at the Spring Boot Admin Server
     * @param {ISpringBootAdminServerInstances} iSpringBootAdminServerInstances 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpringBootAdminServerApi
     */
    public createInstances(iSpringBootAdminServerInstances: ISpringBootAdminServerInstances, options?: AxiosRequestConfig) {
        return SpringBootAdminServerApiFp(this.configuration).createInstances(iSpringBootAdminServerInstances, options).then((request) => request(this.axios, this.basePath));
    }
}


