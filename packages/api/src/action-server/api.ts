/* tslint:disable */
/* eslint-disable */
/**
 * Rasa Custom Action Server Required Endpoint
 * API of the action server which is used by Rasa to execute custom actions.
 *
 * The version of the OpenAPI document: 3.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActionEvent
 */
export interface ActionEvent {
    /**
     * 
     * @type {string}
     * @memberof ActionEvent
     */
    'event': ActionEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ActionEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ActionEvent
     */
    'metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof ActionEvent
     */
    'policy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActionEvent
     */
    'confidence'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActionEvent
     */
    'name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ActionEvent
     */
    'hide_rule_turn'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActionEvent
     */
    'action_text'?: string | null;
}

export const ActionEventEventEnum = {
    Action: 'action'
} as const;

export type ActionEventEventEnum = typeof ActionEventEventEnum[keyof typeof ActionEventEventEnum];

/**
 * 
 * @export
 * @interface ActionEventAllOf
 */
export interface ActionEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ActionEventAllOf
     */
    'event'?: ActionEventAllOfEventEnum;
    /**
     * 
     * @type {string}
     * @memberof ActionEventAllOf
     */
    'policy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActionEventAllOf
     */
    'confidence'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActionEventAllOf
     */
    'name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ActionEventAllOf
     */
    'hide_rule_turn'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActionEventAllOf
     */
    'action_text'?: string | null;
}

export const ActionEventAllOfEventEnum = {
    Action: 'action'
} as const;

export type ActionEventAllOfEventEnum = typeof ActionEventAllOfEventEnum[keyof typeof ActionEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface ActionExecutionRejectedEvent
 */
export interface ActionExecutionRejectedEvent {
    /**
     * 
     * @type {string}
     * @memberof ActionExecutionRejectedEvent
     */
    'event': ActionExecutionRejectedEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ActionExecutionRejectedEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ActionExecutionRejectedEvent
     */
    'metadata'?: object;
}

export const ActionExecutionRejectedEventEventEnum = {
    ActionExecutionRejected: 'action_execution_rejected'
} as const;

export type ActionExecutionRejectedEventEventEnum = typeof ActionExecutionRejectedEventEventEnum[keyof typeof ActionExecutionRejectedEventEventEnum];

/**
 * 
 * @export
 * @interface ActionExecutionRejectedEventAllOf
 */
export interface ActionExecutionRejectedEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ActionExecutionRejectedEventAllOf
     */
    'event'?: ActionExecutionRejectedEventAllOfEventEnum;
}

export const ActionExecutionRejectedEventAllOfEventEnum = {
    ActionExecutionRejected: 'action_execution_rejected'
} as const;

export type ActionExecutionRejectedEventAllOfEventEnum = typeof ActionExecutionRejectedEventAllOfEventEnum[keyof typeof ActionExecutionRejectedEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface ActiveLoopEvent
 */
export interface ActiveLoopEvent {
    /**
     * 
     * @type {string}
     * @memberof ActiveLoopEvent
     */
    'event': ActiveLoopEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ActiveLoopEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ActiveLoopEvent
     */
    'metadata'?: object;
}

export const ActiveLoopEventEventEnum = {
    ActiveLoop: 'active_loop'
} as const;

export type ActiveLoopEventEventEnum = typeof ActiveLoopEventEventEnum[keyof typeof ActiveLoopEventEventEnum];

/**
 * 
 * @export
 * @interface ActiveLoopEventAllOf
 */
export interface ActiveLoopEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ActiveLoopEventAllOf
     */
    'event'?: ActiveLoopEventAllOfEventEnum;
}

export const ActiveLoopEventAllOfEventEnum = {
    ActiveLoop: 'active_loop'
} as const;

export type ActiveLoopEventAllOfEventEnum = typeof ActiveLoopEventAllOfEventEnum[keyof typeof ActiveLoopEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface AgentEvent
 */
export interface AgentEvent {
    /**
     * 
     * @type {string}
     * @memberof AgentEvent
     */
    'event': AgentEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof AgentEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof AgentEvent
     */
    'metadata'?: object;
}

export const AgentEventEventEnum = {
    Agent: 'agent'
} as const;

export type AgentEventEventEnum = typeof AgentEventEventEnum[keyof typeof AgentEventEventEnum];

/**
 * 
 * @export
 * @interface AgentEventAllOf
 */
export interface AgentEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof AgentEventAllOf
     */
    'event'?: AgentEventAllOfEventEnum;
}

export const AgentEventAllOfEventEnum = {
    Agent: 'agent'
} as const;

export type AgentEventAllOfEventEnum = typeof AgentEventAllOfEventEnum[keyof typeof AgentEventAllOfEventEnum];

/**
 * Attachment URL to send to the user
 * @export
 * @interface AttachmentResponse
 */
export interface AttachmentResponse {
    /**
     * 
     * @type {string}
     * @memberof AttachmentResponse
     */
    'attachment'?: string;
}
/**
 * 
 * @export
 * @interface BasicEvent
 */
export interface BasicEvent {
    /**
     * Event name
     * @type {string}
     * @memberof BasicEvent
     */
    'event': string;
    /**
     * Time of application
     * @type {number}
     * @memberof BasicEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof BasicEvent
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface BotEvent
 */
export interface BotEvent {
    /**
     * 
     * @type {string}
     * @memberof BotEvent
     */
    'event': BotEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof BotEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof BotEvent
     */
    'metadata'?: object;
}

export const BotEventEventEnum = {
    Bot: 'bot'
} as const;

export type BotEventEventEnum = typeof BotEventEventEnum[keyof typeof BotEventEventEnum];

/**
 * 
 * @export
 * @interface BotEventAllOf
 */
export interface BotEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof BotEventAllOf
     */
    'event'?: BotEventAllOfEventEnum;
}

export const BotEventAllOfEventEnum = {
    Bot: 'bot'
} as const;

export type BotEventAllOfEventEnum = typeof BotEventAllOfEventEnum[keyof typeof BotEventAllOfEventEnum];

/**
 * A button which can be clicked by the user in the conversation.
 * @export
 * @interface Button
 */
export interface Button {
    /**
     * The text on the button
     * @type {string}
     * @memberof Button
     */
    'title'?: string;
    /**
     * Payload which is sent if the button is pressed.
     * @type {string}
     * @memberof Button
     */
    'payload'?: string;
}
/**
 * Buttons which should be sent to the user.
 * @export
 * @interface ButtonResponse
 */
export interface ButtonResponse {
    /**
     * 
     * @type {Array<Button>}
     * @memberof ButtonResponse
     */
    'buttons'?: Array<Button>;
}
/**
 * 
 * @export
 * @interface CallAction200Response
 */
export interface CallAction200Response {
    /**
     * Events returned by the action.
     * @type {Array<Event>}
     * @memberof CallAction200Response
     */
    'events'?: Array<Event>;
    /**
     * List of responses which should be sent to the user
     * @type {Array<Response>}
     * @memberof CallAction200Response
     */
    'responses'?: Array<Response>;
}
/**
 * 
 * @export
 * @interface CallAction400Response
 */
export interface CallAction400Response {
    /**
     * Name of the action which rejected its execution.
     * @type {string}
     * @memberof CallAction400Response
     */
    'action_name'?: string;
    /**
     * The error message.
     * @type {string}
     * @memberof CallAction400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface CallAction500Response
 */
export interface CallAction500Response {
    /**
     * Json body of the incoming request that resulted in the error.
     * @type {object}
     * @memberof CallAction500Response
     */
    'request_body'?: object;
    /**
     * The error message.
     * @type {string}
     * @memberof CallAction500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface CallActionRequest
 */
export interface CallActionRequest {
    /**
     * The name of the action which should be executed.
     * @type {string}
     * @memberof CallActionRequest
     */
    'next_action'?: string;
    /**
     * Unique id of the user who is having the current conversation.
     * @type {string}
     * @memberof CallActionRequest
     */
    'sender_id'?: string;
    /**
     * 
     * @type {Tracker}
     * @memberof CallActionRequest
     */
    'tracker'?: Tracker;
    /**
     * 
     * @type {Domain}
     * @memberof CallActionRequest
     */
    'domain'?: Domain;
}
/**
 * 
 * @export
 * @interface CancelReminderEvent
 */
export interface CancelReminderEvent {
    /**
     * 
     * @type {string}
     * @memberof CancelReminderEvent
     */
    'event': CancelReminderEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof CancelReminderEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof CancelReminderEvent
     */
    'metadata'?: object;
}

export const CancelReminderEventEventEnum = {
    CancelReminder: 'cancel_reminder'
} as const;

export type CancelReminderEventEventEnum = typeof CancelReminderEventEventEnum[keyof typeof CancelReminderEventEventEnum];

/**
 * 
 * @export
 * @interface CancelReminderEventAllOf
 */
export interface CancelReminderEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof CancelReminderEventAllOf
     */
    'event'?: CancelReminderEventAllOfEventEnum;
}

export const CancelReminderEventAllOfEventEnum = {
    CancelReminder: 'cancel_reminder'
} as const;

export type CancelReminderEventAllOfEventEnum = typeof CancelReminderEventAllOfEventEnum[keyof typeof CancelReminderEventAllOfEventEnum];

/**
 * Custom elements which should be sent to the user.
 * @export
 * @interface CustomResponse
 */
export interface CustomResponse {
    /**
     * 
     * @type {object}
     * @memberof CustomResponse
     */
    'custom'?: object;
}
/**
 * The bot\'s domain.
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * 
     * @type {DomainConfig}
     * @memberof Domain
     */
    'config'?: DomainConfig;
    /**
     * All intent names and properties
     * @type {Array<{ [key: string]: IntentDescriptionValue; }>}
     * @memberof Domain
     */
    'intents'?: Array<{ [key: string]: IntentDescriptionValue; }>;
    /**
     * All entity names
     * @type {Array<string>}
     * @memberof Domain
     */
    'entities'?: Array<string>;
    /**
     * Slot names and configuration
     * @type {{ [key: string]: SlotDescription; }}
     * @memberof Domain
     */
    'slots'?: { [key: string]: SlotDescription; };
    /**
     * Bot response templates
     * @type {{ [key: string]: TemplateDescription; }}
     * @memberof Domain
     */
    'responses'?: { [key: string]: TemplateDescription; };
    /**
     * Available action names
     * @type {Array<string>}
     * @memberof Domain
     */
    'actions'?: Array<string>;
}
/**
 * Addional option
 * @export
 * @interface DomainConfig
 */
export interface DomainConfig {
    /**
     * Store all entites as slot when found
     * @type {boolean}
     * @memberof DomainConfig
     */
    'store_entities_as_slots'?: boolean;
}
/**
 * Custom elements which should be sent to the user.
 * @export
 * @interface ElementResponse
 */
export interface ElementResponse {
    /**
     * 
     * @type {Array<object>}
     * @memberof ElementResponse
     */
    'elements'?: Array<object>;
}
/**
 * 
 * @export
 * @interface EntitiesAddedEvent
 */
export interface EntitiesAddedEvent {
    /**
     * 
     * @type {string}
     * @memberof EntitiesAddedEvent
     */
    'event': EntitiesAddedEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof EntitiesAddedEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof EntitiesAddedEvent
     */
    'metadata'?: object;
    /**
     * 
     * @type {Array<EntitiesAddedEventAllOfEntities>}
     * @memberof EntitiesAddedEvent
     */
    'entities': Array<EntitiesAddedEventAllOfEntities>;
}

export const EntitiesAddedEventEventEnum = {
    Entities: 'entities'
} as const;

export type EntitiesAddedEventEventEnum = typeof EntitiesAddedEventEventEnum[keyof typeof EntitiesAddedEventEventEnum];

/**
 * 
 * @export
 * @interface EntitiesAddedEventAllOf
 */
export interface EntitiesAddedEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof EntitiesAddedEventAllOf
     */
    'event'?: EntitiesAddedEventAllOfEventEnum;
    /**
     * 
     * @type {Array<EntitiesAddedEventAllOfEntities>}
     * @memberof EntitiesAddedEventAllOf
     */
    'entities': Array<EntitiesAddedEventAllOfEntities>;
}

export const EntitiesAddedEventAllOfEventEnum = {
    Entities: 'entities'
} as const;

export type EntitiesAddedEventAllOfEventEnum = typeof EntitiesAddedEventAllOfEventEnum[keyof typeof EntitiesAddedEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface EntitiesAddedEventAllOfEntities
 */
export interface EntitiesAddedEventAllOfEntities {
    /**
     * 
     * @type {number}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'start'?: number;
    /**
     * 
     * @type {number}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'end'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'entity': string;
    /**
     * 
     * @type {number}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'confidence'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'extractor'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'value': any;
    /**
     * 
     * @type {string}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntitiesAddedEventAllOfEntities
     */
    'group'?: string | null;
}
/**
 * Entities within a message
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * Char offset of the start
     * @type {number}
     * @memberof Entity
     */
    'start': number;
    /**
     * Char offset of the end
     * @type {number}
     * @memberof Entity
     */
    'end': number;
    /**
     * Found value for entity
     * @type {string}
     * @memberof Entity
     */
    'value': string;
    /**
     * Type of the entity
     * @type {string}
     * @memberof Entity
     */
    'entity': string;
    /**
     * 
     * @type {number}
     * @memberof Entity
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'event': EventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof Event
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof Event
     */
    'metadata'?: object;
    /**
     * Text of user message.
     * @type {string}
     * @memberof Event
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'input_channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'message_id'?: string | null;
    /**
     * 
     * @type {ParseResult}
     * @memberof Event
     */
    'parse_data'?: ParseResult;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'policy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'confidence'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    'hide_rule_turn'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'action_text'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof Event
     */
    'value': any;
    /**
     * 
     * @type {Array<EntitiesAddedEventAllOfEntities>}
     * @memberof Event
     */
    'entities': Array<EntitiesAddedEventAllOfEntities>;
}

export const EventEventEnum = {
    ActiveLoop: 'active_loop'
} as const;

export type EventEventEnum = typeof EventEventEnum[keyof typeof EventEventEnum];

/**
 * 
 * @export
 * @interface ExportEvent
 */
export interface ExportEvent {
    /**
     * 
     * @type {string}
     * @memberof ExportEvent
     */
    'event': ExportEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ExportEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ExportEvent
     */
    'metadata'?: object;
}

export const ExportEventEventEnum = {
    Export: 'export'
} as const;

export type ExportEventEventEnum = typeof ExportEventEventEnum[keyof typeof ExportEventEventEnum];

/**
 * 
 * @export
 * @interface ExportEventAllOf
 */
export interface ExportEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ExportEventAllOf
     */
    'event'?: ExportEventAllOfEventEnum;
}

export const ExportEventAllOfEventEnum = {
    Export: 'export'
} as const;

export type ExportEventAllOfEventEnum = typeof ExportEventAllOfEventEnum[keyof typeof ExportEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface FollowupEvent
 */
export interface FollowupEvent {
    /**
     * 
     * @type {string}
     * @memberof FollowupEvent
     */
    'event': FollowupEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof FollowupEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof FollowupEvent
     */
    'metadata'?: object;
}

export const FollowupEventEventEnum = {
    Followup: 'followup'
} as const;

export type FollowupEventEventEnum = typeof FollowupEventEventEnum[keyof typeof FollowupEventEventEnum];

/**
 * 
 * @export
 * @interface FollowupEventAllOf
 */
export interface FollowupEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof FollowupEventAllOf
     */
    'event'?: FollowupEventAllOfEventEnum;
}

export const FollowupEventAllOfEventEnum = {
    Followup: 'followup'
} as const;

export type FollowupEventAllOfEventEnum = typeof FollowupEventAllOfEventEnum[keyof typeof FollowupEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface FormEvent
 */
export interface FormEvent {
    /**
     * 
     * @type {string}
     * @memberof FormEvent
     */
    'event': FormEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof FormEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof FormEvent
     */
    'metadata'?: object;
}

export const FormEventEventEnum = {
    Form: 'form'
} as const;

export type FormEventEventEnum = typeof FormEventEventEnum[keyof typeof FormEventEventEnum];

/**
 * 
 * @export
 * @interface FormEventAllOf
 */
export interface FormEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof FormEventAllOf
     */
    'event'?: FormEventAllOfEventEnum;
}

export const FormEventAllOfEventEnum = {
    Form: 'form'
} as const;

export type FormEventAllOfEventEnum = typeof FormEventAllOfEventEnum[keyof typeof FormEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface FormValidationEvent
 */
export interface FormValidationEvent {
    /**
     * 
     * @type {string}
     * @memberof FormValidationEvent
     */
    'event': FormValidationEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof FormValidationEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof FormValidationEvent
     */
    'metadata'?: object;
}

export const FormValidationEventEventEnum = {
    FormValidation: 'form_validation'
} as const;

export type FormValidationEventEventEnum = typeof FormValidationEventEventEnum[keyof typeof FormValidationEventEventEnum];

/**
 * 
 * @export
 * @interface FormValidationEventAllOf
 */
export interface FormValidationEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof FormValidationEventAllOf
     */
    'event'?: FormValidationEventAllOfEventEnum;
}

export const FormValidationEventAllOfEventEnum = {
    FormValidation: 'form_validation'
} as const;

export type FormValidationEventAllOfEventEnum = typeof FormValidationEventAllOfEventEnum[keyof typeof FormValidationEventAllOfEventEnum];

/**
 * Image URL to send to the user
 * @export
 * @interface ImageResponse
 */
export interface ImageResponse {
    /**
     * 
     * @type {string}
     * @memberof ImageResponse
     */
    'image'?: string;
}
/**
 * Intent of the text
 * @export
 * @interface Intent
 */
export interface Intent {
    /**
     * Confidence of the intent
     * @type {number}
     * @memberof Intent
     */
    'confidence': number;
    /**
     * Intent name
     * @type {string}
     * @memberof Intent
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IntentDescriptionValue
 */
export interface IntentDescriptionValue {
    /**
     * 
     * @type {boolean}
     * @memberof IntentDescriptionValue
     */
    'use_entities'?: boolean;
}
/**
 * Latest bot action.
 * @export
 * @interface LatestAction
 */
export interface LatestAction {
    /**
     * latest action name
     * @type {string}
     * @memberof LatestAction
     */
    'action_name'?: string;
    /**
     * text of last bot utterance
     * @type {string}
     * @memberof LatestAction
     */
    'action_text'?: string;
}
/**
 * 
 * @export
 * @interface LoopInterruptedEvent
 */
export interface LoopInterruptedEvent {
    /**
     * 
     * @type {string}
     * @memberof LoopInterruptedEvent
     */
    'event': LoopInterruptedEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof LoopInterruptedEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof LoopInterruptedEvent
     */
    'metadata'?: object;
}

export const LoopInterruptedEventEventEnum = {
    LoopInterrupted: 'loop_interrupted'
} as const;

export type LoopInterruptedEventEventEnum = typeof LoopInterruptedEventEventEnum[keyof typeof LoopInterruptedEventEventEnum];

/**
 * 
 * @export
 * @interface LoopInterruptedEventAllOf
 */
export interface LoopInterruptedEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof LoopInterruptedEventAllOf
     */
    'event'?: LoopInterruptedEventAllOfEventEnum;
}

export const LoopInterruptedEventAllOfEventEnum = {
    LoopInterrupted: 'loop_interrupted'
} as const;

export type LoopInterruptedEventAllOfEventEnum = typeof LoopInterruptedEventAllOfEventEnum[keyof typeof LoopInterruptedEventAllOfEventEnum];

/**
 * NLU parser information. If set, message will not be passed through NLU, but instead this parsing information will be used.
 * @export
 * @interface ParseResult
 */
export interface ParseResult {
    /**
     * Parsed entities
     * @type {Array<Entity>}
     * @memberof ParseResult
     */
    'entities'?: Array<Entity>;
    /**
     * 
     * @type {Intent}
     * @memberof ParseResult
     */
    'intent'?: Intent;
    /**
     * Scores of all intents
     * @type {Array<Intent>}
     * @memberof ParseResult
     */
    'intent_ranking'?: Array<Intent>;
    /**
     * Text of the message
     * @type {string}
     * @memberof ParseResult
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface PauseEvent
 */
export interface PauseEvent {
    /**
     * 
     * @type {string}
     * @memberof PauseEvent
     */
    'event': PauseEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof PauseEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof PauseEvent
     */
    'metadata'?: object;
}

export const PauseEventEventEnum = {
    Pause: 'pause'
} as const;

export type PauseEventEventEnum = typeof PauseEventEventEnum[keyof typeof PauseEventEventEnum];

/**
 * 
 * @export
 * @interface PauseEventAllOf
 */
export interface PauseEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof PauseEventAllOf
     */
    'event'?: PauseEventAllOfEventEnum;
}

export const PauseEventAllOfEventEnum = {
    Pause: 'pause'
} as const;

export type PauseEventAllOfEventEnum = typeof PauseEventAllOfEventEnum[keyof typeof PauseEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface ReminderEvent
 */
export interface ReminderEvent {
    /**
     * 
     * @type {string}
     * @memberof ReminderEvent
     */
    'event': ReminderEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ReminderEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ReminderEvent
     */
    'metadata'?: object;
}

export const ReminderEventEventEnum = {
    Reminder: 'reminder'
} as const;

export type ReminderEventEventEnum = typeof ReminderEventEventEnum[keyof typeof ReminderEventEventEnum];

/**
 * 
 * @export
 * @interface ReminderEventAllOf
 */
export interface ReminderEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ReminderEventAllOf
     */
    'event'?: ReminderEventAllOfEventEnum;
}

export const ReminderEventAllOfEventEnum = {
    Reminder: 'reminder'
} as const;

export type ReminderEventAllOfEventEnum = typeof ReminderEventAllOfEventEnum[keyof typeof ReminderEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface ResetSlotsEvent
 */
export interface ResetSlotsEvent {
    /**
     * 
     * @type {string}
     * @memberof ResetSlotsEvent
     */
    'event': ResetSlotsEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ResetSlotsEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ResetSlotsEvent
     */
    'metadata'?: object;
}

export const ResetSlotsEventEventEnum = {
    ResetSlots: 'reset_slots'
} as const;

export type ResetSlotsEventEventEnum = typeof ResetSlotsEventEventEnum[keyof typeof ResetSlotsEventEventEnum];

/**
 * 
 * @export
 * @interface ResetSlotsEventAllOf
 */
export interface ResetSlotsEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ResetSlotsEventAllOf
     */
    'event'?: ResetSlotsEventAllOfEventEnum;
}

export const ResetSlotsEventAllOfEventEnum = {
    ResetSlots: 'reset_slots'
} as const;

export type ResetSlotsEventAllOfEventEnum = typeof ResetSlotsEventAllOfEventEnum[keyof typeof ResetSlotsEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * The text which should be uttered.
     * @type {string}
     * @memberof Response
     */
    'text': string;
    /**
     * 
     * @type {Array<Button>}
     * @memberof Response
     */
    'buttons'?: Array<Button>;
    /**
     * 
     * @type {Array<object>}
     * @memberof Response
     */
    'elements'?: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof Response
     */
    'custom'?: object;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'attachment'?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof Response
     */
    'template'?: string;
    /**
     * Name of the response
     * @type {string}
     * @memberof Response
     */
    'response': string;
}
/**
 * Response the bot should utter.
 * @export
 * @interface ResponseResponse
 */
export interface ResponseResponse {
    [key: string]: string | any;

    /**
     * Name of the response
     * @type {string}
     * @memberof ResponseResponse
     */
    'response': string;
}
/**
 * 
 * @export
 * @interface RestartEvent
 */
export interface RestartEvent {
    /**
     * 
     * @type {string}
     * @memberof RestartEvent
     */
    'event': RestartEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof RestartEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof RestartEvent
     */
    'metadata'?: object;
}

export const RestartEventEventEnum = {
    Restart: 'restart'
} as const;

export type RestartEventEventEnum = typeof RestartEventEventEnum[keyof typeof RestartEventEventEnum];

/**
 * 
 * @export
 * @interface RestartEventAllOf
 */
export interface RestartEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof RestartEventAllOf
     */
    'event'?: RestartEventAllOfEventEnum;
}

export const RestartEventAllOfEventEnum = {
    Restart: 'restart'
} as const;

export type RestartEventAllOfEventEnum = typeof RestartEventAllOfEventEnum[keyof typeof RestartEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface ResumeEvent
 */
export interface ResumeEvent {
    /**
     * 
     * @type {string}
     * @memberof ResumeEvent
     */
    'event': ResumeEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof ResumeEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof ResumeEvent
     */
    'metadata'?: object;
}

export const ResumeEventEventEnum = {
    Resume: 'resume'
} as const;

export type ResumeEventEventEnum = typeof ResumeEventEventEnum[keyof typeof ResumeEventEventEnum];

/**
 * 
 * @export
 * @interface ResumeEventAllOf
 */
export interface ResumeEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof ResumeEventAllOf
     */
    'event'?: ResumeEventAllOfEventEnum;
}

export const ResumeEventAllOfEventEnum = {
    Resume: 'resume'
} as const;

export type ResumeEventAllOfEventEnum = typeof ResumeEventAllOfEventEnum[keyof typeof ResumeEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface RewindEvent
 */
export interface RewindEvent {
    /**
     * 
     * @type {string}
     * @memberof RewindEvent
     */
    'event': RewindEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof RewindEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof RewindEvent
     */
    'metadata'?: object;
}

export const RewindEventEventEnum = {
    Rewind: 'rewind'
} as const;

export type RewindEventEventEnum = typeof RewindEventEventEnum[keyof typeof RewindEventEventEnum];

/**
 * 
 * @export
 * @interface RewindEventAllOf
 */
export interface RewindEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof RewindEventAllOf
     */
    'event'?: RewindEventAllOfEventEnum;
}

export const RewindEventAllOfEventEnum = {
    Rewind: 'rewind'
} as const;

export type RewindEventAllOfEventEnum = typeof RewindEventAllOfEventEnum[keyof typeof RewindEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface SessionStartedEvent
 */
export interface SessionStartedEvent {
    /**
     * 
     * @type {string}
     * @memberof SessionStartedEvent
     */
    'event': SessionStartedEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof SessionStartedEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof SessionStartedEvent
     */
    'metadata'?: object;
}

export const SessionStartedEventEventEnum = {
    SessionStarted: 'session_started'
} as const;

export type SessionStartedEventEventEnum = typeof SessionStartedEventEventEnum[keyof typeof SessionStartedEventEventEnum];

/**
 * 
 * @export
 * @interface SessionStartedEventAllOf
 */
export interface SessionStartedEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof SessionStartedEventAllOf
     */
    'event'?: SessionStartedEventAllOfEventEnum;
}

export const SessionStartedEventAllOfEventEnum = {
    SessionStarted: 'session_started'
} as const;

export type SessionStartedEventAllOfEventEnum = typeof SessionStartedEventAllOfEventEnum[keyof typeof SessionStartedEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface SlotDescription
 */
export interface SlotDescription {
    /**
     * 
     * @type {boolean}
     * @memberof SlotDescription
     */
    'auto_fill': boolean;
    /**
     * 
     * @type {string}
     * @memberof SlotDescription
     */
    'initial_value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SlotDescription
     */
    'type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlotDescription
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SlotEvent
 */
export interface SlotEvent {
    /**
     * 
     * @type {string}
     * @memberof SlotEvent
     */
    'event': SlotEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof SlotEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof SlotEvent
     */
    'metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof SlotEvent
     */
    'name': string;
    /**
     * 
     * @type {any}
     * @memberof SlotEvent
     */
    'value': any;
}

export const SlotEventEventEnum = {
    Slot: 'slot'
} as const;

export type SlotEventEventEnum = typeof SlotEventEventEnum[keyof typeof SlotEventEventEnum];

/**
 * 
 * @export
 * @interface SlotEventAllOf
 */
export interface SlotEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof SlotEventAllOf
     */
    'event'?: SlotEventAllOfEventEnum;
    /**
     * 
     * @type {string}
     * @memberof SlotEventAllOf
     */
    'name': string;
    /**
     * 
     * @type {any}
     * @memberof SlotEventAllOf
     */
    'value': any;
}

export const SlotEventAllOfEventEnum = {
    Slot: 'slot'
} as const;

export type SlotEventAllOfEventEnum = typeof SlotEventAllOfEventEnum[keyof typeof SlotEventAllOfEventEnum];

/**
 * @type SlotValue
 * @export
 */
export type SlotValue = Array<string> | string;

/**
 * 
 * @export
 * @interface TemplateDescription
 */
export interface TemplateDescription {
    /**
     * Template text
     * @type {string}
     * @memberof TemplateDescription
     */
    'text': string;
}
/**
 * Response template the bot should utter.
 * @export
 * @interface TemplateResponse
 */
export interface TemplateResponse {
    [key: string]: string | any;

    /**
     * Name of the template
     * @type {string}
     * @memberof TemplateResponse
     */
    'template'?: string;
}
/**
 * Text which the bot should utter.
 * @export
 * @interface TextResponse
 */
export interface TextResponse {
    /**
     * The text which should be uttered.
     * @type {string}
     * @memberof TextResponse
     */
    'text': string;
}
/**
 * Conversation tracker which stores the conversation state.
 * @export
 * @interface Tracker
 */
export interface Tracker {
    /**
     * ID of the conversation
     * @type {string}
     * @memberof Tracker
     */
    'conversation_id'?: string;
    /**
     * Slot values
     * @type {Array<{ [key: string]: SlotValue; }>}
     * @memberof Tracker
     */
    'slots'?: Array<{ [key: string]: SlotValue; }>;
    /**
     * 
     * @type {ParseResult}
     * @memberof Tracker
     */
    'latest_message'?: ParseResult;
    /**
     * Most recent event time
     * @type {number}
     * @memberof Tracker
     */
    'latest_event_time'?: number;
    /**
     * Deterministic scheduled next action
     * @type {string}
     * @memberof Tracker
     */
    'followup_action'?: string;
    /**
     * Bot is paused
     * @type {boolean}
     * @memberof Tracker
     */
    'paused'?: boolean;
    /**
     * 
     * @type {Array<Event>}
     * @memberof Tracker
     */
    'events'?: Array<Event>;
    /**
     * Communication channel
     * @type {string}
     * @memberof Tracker
     */
    'latest_input_channel'?: string;
    /**
     * Name of last bot action
     * @type {string}
     * @memberof Tracker
     */
    'latest_action_name'?: string;
    /**
     * 
     * @type {LatestAction}
     * @memberof Tracker
     */
    'latest_action'?: LatestAction;
    /**
     * 
     * @type {TrackerActiveLoop}
     * @memberof Tracker
     */
    'active_loop'?: TrackerActiveLoop;
}
/**
 * Name of the active loop
 * @export
 * @interface TrackerActiveLoop
 */
export interface TrackerActiveLoop {
    /**
     * Name of the active loop
     * @type {string}
     * @memberof TrackerActiveLoop
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UndoEvent
 */
export interface UndoEvent {
    /**
     * 
     * @type {string}
     * @memberof UndoEvent
     */
    'event': UndoEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof UndoEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof UndoEvent
     */
    'metadata'?: object;
}

export const UndoEventEventEnum = {
    Undo: 'undo'
} as const;

export type UndoEventEventEnum = typeof UndoEventEventEnum[keyof typeof UndoEventEventEnum];

/**
 * 
 * @export
 * @interface UndoEventAllOf
 */
export interface UndoEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof UndoEventAllOf
     */
    'event'?: UndoEventAllOfEventEnum;
}

export const UndoEventAllOfEventEnum = {
    Undo: 'undo'
} as const;

export type UndoEventAllOfEventEnum = typeof UndoEventAllOfEventEnum[keyof typeof UndoEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface UserEvent
 */
export interface UserEvent {
    /**
     * 
     * @type {string}
     * @memberof UserEvent
     */
    'event': UserEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof UserEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof UserEvent
     */
    'metadata'?: object;
    /**
     * Text of user message.
     * @type {string}
     * @memberof UserEvent
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserEvent
     */
    'input_channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserEvent
     */
    'message_id'?: string | null;
    /**
     * 
     * @type {ParseResult}
     * @memberof UserEvent
     */
    'parse_data'?: ParseResult;
}

export const UserEventEventEnum = {
    User: 'user'
} as const;

export type UserEventEventEnum = typeof UserEventEventEnum[keyof typeof UserEventEventEnum];

/**
 * Event for incoming user message.
 * @export
 * @interface UserEventAllOf
 */
export interface UserEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserEventAllOf
     */
    'event'?: UserEventAllOfEventEnum;
    /**
     * Text of user message.
     * @type {string}
     * @memberof UserEventAllOf
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserEventAllOf
     */
    'input_channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserEventAllOf
     */
    'message_id'?: string | null;
    /**
     * 
     * @type {ParseResult}
     * @memberof UserEventAllOf
     */
    'parse_data'?: ParseResult;
}

export const UserEventAllOfEventEnum = {
    User: 'user'
} as const;

export type UserEventAllOfEventEnum = typeof UserEventAllOfEventEnum[keyof typeof UserEventAllOfEventEnum];

/**
 * 
 * @export
 * @interface UserFeaturizationEvent
 */
export interface UserFeaturizationEvent {
    /**
     * 
     * @type {string}
     * @memberof UserFeaturizationEvent
     */
    'event': UserFeaturizationEventEventEnum;
    /**
     * Time of application
     * @type {number}
     * @memberof UserFeaturizationEvent
     */
    'timestamp'?: number;
    /**
     * 
     * @type {object}
     * @memberof UserFeaturizationEvent
     */
    'metadata'?: object;
}

export const UserFeaturizationEventEventEnum = {
    UserFeaturization: 'user_featurization'
} as const;

export type UserFeaturizationEventEventEnum = typeof UserFeaturizationEventEventEnum[keyof typeof UserFeaturizationEventEventEnum];

/**
 * 
 * @export
 * @interface UserFeaturizationEventAllOf
 */
export interface UserFeaturizationEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserFeaturizationEventAllOf
     */
    'event'?: UserFeaturizationEventAllOfEventEnum;
}

export const UserFeaturizationEventAllOfEventEnum = {
    UserFeaturization: 'user_featurization'
} as const;

export type UserFeaturizationEventAllOfEventEnum = typeof UserFeaturizationEventAllOfEventEnum[keyof typeof UserFeaturizationEventAllOfEventEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Rasa dialogue management sends a request to the action server to execute a certain custom action. As a response to the action call from Rasa, you can modify the tracker, e.g. by setting slots and send responses back to the user.
         * @summary Request to execute a custom action
         * @param {CallActionRequest} callActionRequest Describes the action to be called and provides information on the current state of the conversation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callAction: async (callActionRequest: CallActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callActionRequest' is not null or undefined
            assertParamExists('callAction', 'callActionRequest', callActionRequest)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Rasa dialogue management sends a request to the action server to execute a certain custom action. As a response to the action call from Rasa, you can modify the tracker, e.g. by setting slots and send responses back to the user.
         * @summary Request to execute a custom action
         * @param {CallActionRequest} callActionRequest Describes the action to be called and provides information on the current state of the conversation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callAction(callActionRequest: CallActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallAction200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callAction(callActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Rasa dialogue management sends a request to the action server to execute a certain custom action. As a response to the action call from Rasa, you can modify the tracker, e.g. by setting slots and send responses back to the user.
         * @summary Request to execute a custom action
         * @param {CallActionRequest} callActionRequest Describes the action to be called and provides information on the current state of the conversation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callAction(callActionRequest: CallActionRequest, options?: any): AxiosPromise<CallAction200Response> {
            return localVarFp.callAction(callActionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Rasa dialogue management sends a request to the action server to execute a certain custom action. As a response to the action call from Rasa, you can modify the tracker, e.g. by setting slots and send responses back to the user.
     * @summary Request to execute a custom action
     * @param {CallActionRequest} callActionRequest Describes the action to be called and provides information on the current state of the conversation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public callAction(callActionRequest: CallActionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).callAction(callActionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


